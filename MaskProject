{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coursework "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This project will aim to create different models to for mask detection in images with the added complexity of determining gender whether are female or male. Pre-processing the images to resize, binarise and extracted features before performing image augmentation and class decomposition. Each dataset generated in the process is compared through the accuracy of multiple classifiers such as Support Vector Machine (SVM), Random Forest (RF), Neural Network(NN) and Convolutional Neural Network (CNN). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 The Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The image repository initially consisted of the Gupta Human Faces (HF) dataset (2020). This data had sufficient data for masked individuals of both genders however it was lacking in the amount of unmasked faces. Especially unmasked females, which would be crucial for the model. Therefore, a second dataset The Larxel Face Mask Detection(FMD)(2020) was introduced extracting 250 images of female faces and 250 male faces without masks. Any images where masks were not properly on were deleted and group photos within the datasets were cropped to extract multiple faces from each photo.\n",
    "Resulting in 1273 images compiled for the experiments.\n",
    "\n",
    "Once the two datasets were collected, four subfolders were created. The images within them were manually divided to each subfolder depending on whether they were male or female or had a mask on and named below:\n",
    "\n",
    " - 'femalemask' – Contains female faces with a mask.\n",
    " - 'femalenomask' – Contains female faces without a mask.\n",
    " - 'malemask' – Contains male faces with a mask.\n",
    " - ‘malenomask' – Contains male faces without a mask\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Pre-Processing "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are three aims of the pre-processing stage:\n",
    "\n",
    " - Resize Images\n",
    " - Binarise Image \n",
    " - Histogram of Gradients(HOG) Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.1. Resize Images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For pre-processing stage, the images will be resized and then binarised. The images are loaded and resized to 100x100 so that all the images in the repository will be the same size for the classification problem further on. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.2. Binarise  Images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each image is binarised and have a threshold added to the images. Creating a copy of the image, the function iterates over all rows and columns of the array, comparing the pixel value to the threshold. When the pixel's value is smaller than the threshold, it’s value is transformed to zero. If the value is greater than the threshold it is converted to 255. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.3 Histogram of Gradients(HOG) Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To extract facial features from the images to allow for the classification a technique HOG is applied to the image repository. Counting the number of times a gradient orientation appears in a specific area of an image to turn the image into a feature vector.  The image's x and y gradients, is determined with its magnitude by splitting the image into patches. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.1.3.1 Creating the Hog Feature Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    " \n",
    "import warnings; warnings.simplefilter('ignore')\n",
    "# Obtaining the HOG gradients of an image\n",
    "from skimage import feature\n",
    "class HOG:\n",
    "    def __init__(self, orientations = 9, pixelsPerCell = (8, 8),\n",
    "        cellsPerBlock = (3, 3), transform = False):\n",
    "        # store the number of orientations, pixels per cell,\n",
    "        # cells per block, and whether or not power law\n",
    "        # compression should be applied\n",
    "        self.orienations = orientations\n",
    "        self.pixelsPerCell = pixelsPerCell\n",
    "        self.cellsPerBlock = cellsPerBlock\n",
    "        self.transform = transform\n",
    "\n",
    "    def describe(self, image):\n",
    "        # compute HOG for the image\n",
    "        hist = feature.hog(image, orientations = self.orienations,\n",
    "            pixels_per_cell = self.pixelsPerCell,\n",
    "            cells_per_block = self.cellsPerBlock,\n",
    "            transform_sqrt = self.transform)\n",
    "        ## return the HOG features\n",
    "        return hist\n",
    "    \n",
    "hog = HOG(orientations = 18, pixelsPerCell = (10, 10), cellsPerBlock = (1, 1), transform = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Apply Pre-Processing to Image Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# load the relevant packages\n",
    "import os\n",
    "import cv2\n",
    "import csv\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from skimage import feature\n",
    "from pandas import DataFrame\n",
    "from skimage import morphology\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "#set the desired width and height\n",
    "resize_factor = 100 # applies for both height and width\n",
    "\n",
    "#set path to the images\n",
    "path = 'images'\n",
    "target =  []\n",
    "datarepo = [] # List to append the images as 2D numpy arrays\n",
    "originalrepo = [] # Create a repo for flattened pixels\n",
    "binarisedrepo = []  # Create a list to append the binarised pixels\n",
    "hogrepo = [] # Create a list to append the HOG features\n",
    "denoiserepo = []\n",
    "\n",
    "for root, dirs, files in os.walk(path):\n",
    "     for file in files:\n",
    "        with open(os.path.join(root, file), \"r\") as auto:\n",
    "            if file != \".DS_Store\":\n",
    "                #pre-processing the data\n",
    "                #load each image\n",
    "                image = cv2.imread(root+'/'+file, 0)\n",
    "                 #resize each image\n",
    "                image = cv2.resize(image, (resize_factor, resize_factor))\n",
    "                #assign each image to datarepo\n",
    "                datarepo.append(image)\n",
    "                #flatten each image to origninaldata\n",
    "                originalrepo.append(image.flatten())\n",
    "                #binarise each image\n",
    "                _, image = cv2.threshold(image, 180, 255, 0)\n",
    "                #flatten binarised images\n",
    "                binarisedrepo.append(image.flatten())\n",
    "                # Extract HOG and append to HOG repo\n",
    "                hogfeatures = hog.describe(image)\n",
    "                hogrepo.append(hogfeatures)\n",
    "                 # Append the folder where the image is to the target list\n",
    "                target.append(root.replace(path,'').replace('\\\\','')) \n",
    "                \n",
    "                \n",
    "# Convert the repo list into  numpy arrays\n",
    "originalrepo = np.array(originalrepo) \n",
    "binarisedrepo = np.array(binarisedrepo)\n",
    "hogrepo = np.array(hogrepo)\n",
    "denoiserepo = np.array(denoiserepo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1 Calculating Class Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Class  Number of Samples\n",
      "0    femalemask                348\n",
      "1  femalenomask                285\n",
      "2      malemask                355\n",
      "3    malenomask                285\n",
      "Total images: 1273\n"
     ]
    }
   ],
   "source": [
    "#relevant packages imported\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "histo = [['Class','Number of Samples']]\n",
    "for i, label1 in enumerate(sorted(list(set(target)))):\n",
    "    cont = 0\n",
    "    for j, label2 in enumerate(target):\n",
    "        if label1 == label2:\n",
    "            cont+=1\n",
    "    histo.append([label1,cont])\n",
    "histo.append(['Total Samples', len(target)])\n",
    "\n",
    "# Load as a panda\n",
    "histo_panda = pd.DataFrame.from_records(histo[1:-1], columns=histo[0])\n",
    "print(histo_panda)\n",
    "print('Total images: '+str(len(target)))\n",
    "\n",
    "#The results states that there is 348 instances of the class femalemask, 285 instances of the class femalenomask, \n",
    "#With 355 instances of the class malemask and 285 instances of the class malenomask.\n",
    "#Overall, the original repository contains 1273 images stored as a numpy array \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.2 Visualise Class Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of target:  1273\n",
      "Size of original repository:  (1273, 10000)\n",
      "Example of original repository: \n",
      "[[222 221 221 ... 242 246 250]\n",
      " [ 40  34  34 ...   0   0   0]\n",
      " [230 228 228 ...  91 111 114]\n",
      " ...\n",
      " [124 124 123 ...  88  95 102]\n",
      " [117 117 118 ... 255 255 255]\n",
      " [145 133 127 ...  66  64  63]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Create a histogram using seaborn\n",
    "sns_plot = sns.barplot(y=\"Class\", x=\"Number of Samples\", data=histo_panda, palette=\"Blues\")\n",
    "sns_plot.figure.set_size_inches(10,6)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "print('Size of target: ', len(target))\n",
    "print('Size of original repository: ', originalrepo.shape)\n",
    "print('Example of original repository: ')\n",
    "print(originalrepo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This plot visualises how male mask has the most number of samples within the data frame with female masks being the second highest number of instances. With females without masks and males without masks with the next highest count repectively. This shows a class imbalance as there is more counts of images with masks than without mask and there is over double the number of males with masks than without.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved Class Distribution Bar Chart\n"
     ]
    }
   ],
   "source": [
    "# Save the image\n",
    "sns_plot.figure.savefig('barchart.jpg', orientation = 'landscape', dpi = 600, transparent=True)\n",
    "print('Saved Class Distribution Bar Chart')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of target:  1273\n",
      "Size of original repository:  (1273, 10000)\n",
      "Size of binarised data structure:  (1273, 10000)\n",
      "Size of HOG features data structure:  (1273, 1800)\n"
     ]
    }
   ],
   "source": [
    "print('Size of target: ', len(target))\n",
    "print('Size of original repository: ', originalrepo.shape)\n",
    "print('Size of binarised data structure: ', binarisedrepo.shape)\n",
    "print('Size of HOG features data structure: ', hogrepo.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3. Class Imbalance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.3.1. Random OverSampling Repository "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random OverSampling (ROS) is a data-based imbalance handling techniques that is applied to the HOG repository. This aims to increase the minority class to provide a balanced dataset. There can be issues when using a non-binary dataset because it is more difficult to establish the minority class however the process is applied below, and this augmentation is visualised in the following bar plot. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3.1.1 Calculate the Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calculating class distribution (after ROS)\n",
      "          Class  Number of Samples\n",
      "0    femalemask                355\n",
      "1  femalenomask                355\n",
      "2      malemask                355\n",
      "3    malenomask                355\n",
      "Total images: 1420\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler\n",
    "ros = RandomOverSampler(random_state=0)\n",
    "hogrepo_ros, target_ros = ros.fit_resample(hogrepo,target)\n",
    "\n",
    "print('\\nCalculating class distribution (after ROS)')\n",
    "histo = [['Class','Number of Samples']]\n",
    "for i, label1 in enumerate(sorted(list(set(target_ros)))):\n",
    "    cont = 0\n",
    "    for j, label2 in enumerate(target_ros):\n",
    "        if label1 == label2:\n",
    "            cont+=1\n",
    "    histo.append([label1,cont])\n",
    "histo.append(['Total Samples', len(target_ros)])\n",
    "## Save the histogram as a .csv file   \n",
    "with open('classdistribution_ros.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, hist in enumerate(histo):\n",
    "        filewriter.writerow(hist)\n",
    "## Convert histo into a panda dataframe\n",
    "histo_panda = pd.DataFrame.from_records(histo[1:-1], columns=histo[0])\n",
    "print(histo_panda)\n",
    "print('Total images: '+str(len(target_ros)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3.1.2 Visualise Class Distribution After ROS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Showing class distribution bar chart (after ros)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of ROS augmented target:  1420\n",
      "Size of ROS augmented repository:  (1420, 1800)\n",
      "The repository has been augmented from 1273 images with the size of 10000, to 1420 images with the size of 1800. \n",
      "Resulting in each class containing 350 instances each and more balanced.\n"
     ]
    }
   ],
   "source": [
    "## Create a histogram using seaborn\n",
    "sns_plot = sns.barplot(y=\"Class\", x=\"Number of Samples\", data=histo_panda, palette=\"Set2\")\n",
    "sns_plot.figure.set_size_inches(10,6)\n",
    "print('\\nShowing class distribution bar chart (after ros)')\n",
    "plt.show()\n",
    "\n",
    "print('Size of ROS augmented target: ', len(target_ros))\n",
    "print('Size of ROS augmented repository: ', hogrepo_ros.shape)\n",
    "print('The repository has been augmented from 1273 images with the size of 10000, to 1420 images with the size of 1800. \\nResulting in each class containing 350 instances each and more balanced.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Save the image\n",
    "sns_plot.figure.savefig('barchart_ros.jpg', orientation = 'landscape', dpi = 600, transparent=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However random oversampling is most effective on binary classification, as this is a non-binary classification it is further improved with the application of class decomposition. The Standard Balancing Equation can help calculate the imbalances with the number of clusters representing the total number of instances of a specific class divided by the mean class distribution. \n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  2.3.2 K Using Standard Balancing Equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Values of k for each class:  [2, 1, 2, 1]\n",
      "Number of classes after class decomposition:  6\n"
     ]
    }
   ],
   "source": [
    "#The function created below calculates k values for each class. \n",
    "#This will obtain the number of classes to determine a new class distribution to improve imbalance.\n",
    "def standardbalancingequation(target):\n",
    "    import math\n",
    "    \n",
    "    ## Obtain the number of classes in label list and sort\n",
    "    labelsIndexesUnique = list(set(target))\n",
    "    labelsIndexesUnique.sort()\n",
    "    \n",
    "    ## For each class, count the number of instances and calculate ki\n",
    "    k = []\n",
    "    for label in labelsIndexesUnique:\n",
    "        k.append(target.count(label))\n",
    "    avgInst = sum(k)/len(k)\n",
    "    k = [math.floor((ki/avgInst)+1) for ki in k]\n",
    "    print('Values of k for each class: ', k)\n",
    "    return k\n",
    "\n",
    "k_kmeans = standardbalancingequation(target)\n",
    "print('Number of classes after class decomposition: ', sum(k_kmeans))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3.2.1. Class Decomposition(CD) Using KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of clusters for class femalemask: 2\n",
      "Number of clusters for class femalenomask: 1\n",
      "Number of clusters for class malemask: 2\n",
      "Number of clusters for class malenomask: 1\n"
     ]
    }
   ],
   "source": [
    "def CDKmeans(data, target, k): \n",
    "    from sklearn.cluster import KMeans\n",
    "    target_cd = ['']*len(target)\n",
    "    IndexesUnique = list(set(target))\n",
    "    IndexesUnique.sort()\n",
    "    for i, label in enumerate(IndexesUnique):\n",
    "        print('Number of clusters for class '+str(label)+': '+str(k[i]))\n",
    "        \n",
    "        ## Split the dataset\n",
    "        data_tocluster = []\n",
    "        data_tocluster_index = []\n",
    "        for j, dat in enumerate(data):\n",
    "            if target[j]==label:\n",
    "                data_tocluster.append(dat)\n",
    "                data_tocluster_index.append(j)\n",
    "        if 1<k[i]<=len(data_tocluster):\n",
    "            \n",
    "                ## Apply k-means to the list    \n",
    "                kmeans = KMeans(n_clusters=k[i], random_state=0).fit(data_tocluster)\n",
    "                for n, m in enumerate(kmeans.labels_):\n",
    "                    target_cd[data_tocluster_index[n]]=str(label)+'_c'+str(m)\n",
    "        else:\n",
    "            for m in data_tocluster_index:\n",
    "                target_cd[m]=str(label)+'_c0'\n",
    "    return target_cd\n",
    "\n",
    "target_cd = CDKmeans(binarisedrepo, target, k_kmeans)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the k value for femalenomask and malenomask is less than 2, no clustering is needed. However, femalemask and malemask all have values over 2 therefore floor is applied to give the correct clusters. This results in the creation of two new classes for femalemask and malemask which as femalemask_cd and malemask_cd. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3.2.2. New Class Distribution "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Class  Number of Samples\n",
      "0    femalemask_c0                279\n",
      "1    femalemask_c1                 69\n",
      "2  femalenomask_c0                285\n",
      "3      malemask_c0                123\n",
      "4      malemask_c1                232\n",
      "5    malenomask_c0                285\n",
      "Total images: 1273\n",
      "The class decomposition method increased the size of the augmented pixel repository to 1236 rows with 1800 columns\n"
     ]
    }
   ],
   "source": [
    "#This is shown by calulating the new class distribution below. \n",
    "histo = [['Class','Number of Samples']]\n",
    "for i, label1 in enumerate(sorted(list(set(target_cd)))):\n",
    "    cont = 0\n",
    "    for j, label2 in enumerate(target_cd):\n",
    "        if label1 == label2:\n",
    "            cont+=1\n",
    "    histo.append([label1,cont])\n",
    "histo.append(['Total Samples', len(target_cd)])\n",
    "\n",
    "        \n",
    "## Convert histo into a panda dataframe\n",
    "histo_panda = pd.DataFrame.from_records(histo[1:-1], columns=histo[0])\n",
    "print(histo_panda)\n",
    "print('Total images: '+str(len(target_cd)))\n",
    "print('The class decomposition method increased the size of the augmented pixel repository to 1236 rows with 1800 columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Target_cd consists of the 2 female mask classifiers, femalemask_c0 with 279 and femalemask_c1 with 69. A classifier for females without masks (femalenomask_c0 )with 285, a classifier for males without masks (malenomask_c0) with 285. With finally 2 male mask classifiers, malemask_c0 with 123 and malemask_c1 with 232. Overall creating six classes in this class decomposition target_cd and visualised below. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3.2.3. Visualise Class Distribution "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Create a histogram using seaborn\n",
    "sns_plot = sns.barplot(y=\"Class\", x=\"Number of Samples\", data=histo_panda, palette = 'pastel')\n",
    "sns_plot.figure.set_size_inches(10,6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Save the image\n",
    "sns_plot.figure.savefig('barchart_cd.jpg', orientation = 'landscape', dpi = 600, transparent=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4. Repositories as CSV Files "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each Numpy data frame is converted to a csv file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4.1. Original Repository\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original repository of images resized and flattened saved as originalrepo.csv\n"
     ]
    }
   ],
   "source": [
    "\n",
    "with open('originalrepo.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, h in enumerate(originalrepo):\n",
    "        row = np.concatenate((h,[target[i]]))\n",
    "        filewriter.writerow(row)\n",
    "\n",
    "print('\\nOriginal repository of images resized and flattened saved as originalrepo.csv') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4.2. Binarised Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Binarised repository of images resized, binarised and flattened  saved as binarisedrepo.csv\n"
     ]
    }
   ],
   "source": [
    "with open('binarisedrepo.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, l in enumerate(binarisedrepo):\n",
    "        row = np.concatenate((l,[target[i]]))\n",
    "        filewriter.writerow(row)\n",
    "print('\\nBinarised repository of images resized, binarised and flattened  saved as binarisedrepo.csv')  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4.3. Hog Features Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Hog feature extraction repository of images resized, binarised, hog features extracted and flattened saved as hogrepo.csv\n"
     ]
    }
   ],
   "source": [
    "with open('hogrepo.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, h in enumerate(hogrepo):\n",
    "        row = np.concatenate((h,[target[i]]))\n",
    "        filewriter.writerow(row)\n",
    "\n",
    "print('\\nHog feature extraction repository of images resized, binarised, hog features extracted and flattened saved as hogrepo.csv')  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4.4. ROS Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ROS repository of images resized, binarised, hog features extracted with random oversampling applied and flattened. Then saved as hog_ros.csv\n"
     ]
    }
   ],
   "source": [
    "\n",
    "with open('hog_ros.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, h in enumerate(hogrepo_ros):\n",
    "        row = np.concatenate((h,[target_ros[i]]))\n",
    "        filewriter.writerow(row)\n",
    "        \n",
    "print('\\nROS repository of images resized, binarised, hog features extracted with random oversampling applied and flattened. Then saved as hog_ros.csv') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4.5. Class Decomposition Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Class Decomposition repository of images resized, binarised, hog features extracted and with class decomposition applied and flattened. Then saved as original_cd.csv\n"
     ]
    }
   ],
   "source": [
    "   with open('original_cd.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "    filewriter = csv.writer(csvfile, delimiter=',')\n",
    "    for i, pix in enumerate(originalrepo):\n",
    "        row = np.concatenate((pix,[target_cd[i]]))\n",
    "        filewriter.writerow(row)\n",
    "        \n",
    "print('\\n Class Decomposition repository of images resized, binarised, hog features extracted and with class decomposition applied and flattened. Then saved as original_cd.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Comparing Classification Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In total, there has been 4 datasets created and a class decomposition target repository. To evaluate their accuracy to classify female and males with masks and no mask, each dataset will be split into a train and test set. The data will be split with 80% of the data kept for training the model and 20% used to test the model. Where then 4 classifiers such as Support Vectore Machine Classifier, Random Forest Classifier, Neural Network and Convolutional Neural Networks will be applied to all repositories. and stuctured such as: \n",
    " \n",
    "3.1 Original Repository  \n",
    " - 3.1.1 Support Vectore Machine \n",
    " - 3.1.2 Random Forest Classifier \n",
    " - 3.1.3 Neural Network \n",
    " - 3.1.4 Convolutional Neural Networks \n",
    "   \n",
    "3.2 Binarised Repository  \n",
    "3.3 Hog Repository  \n",
    "3.4 ROS Repository \n",
    "3.5 Class Decomposition  \n",
    " \n",
    "  \n",
    "Each Experiment will be implemented with a stratified fivefold cross validation and compared on their accuracy. With the results discussed in Section 4.1. The original repository will provide detailed steps for which each following repository will follow. Initially Support Vector Machine and Random Forest will be applied to the dataset before a cross validation function measures the accuracy of each classifier.  Then a manual stratified K-fold cross validation split will be applied to the neural network and the convolutional neural network ensuring each model measures mean accuracy. A random seed of 123 is applied to each experiment to ensure reproducibility.\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1. Original Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)\n",
    "\n",
    "# import the relevant packages\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#set target set to an array\n",
    "target = np.array(target)\n",
    "\n",
    "# split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(originalrepo, target, stratify=target, test_size=0.2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.1.1. Support Vector Machine(SVM) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SVM is an algorithm that locates a line (or hyperplane) dividing data between different groups. The algorithm collects the input data as input and generates a hyperplane that aims to classify the correct groups. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import relevant classifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# initiatiate the SVC\n",
    "svc_model = SVC()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "svc_fit = svc_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "svc_pred = svc_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "svc_ac = cross_val_score(svc_model, originalrepo, target, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.1.2. Random Forest (RF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random forests (FR) is a algorithm designed to create a forest from decision trees that individually vote on an instance to create a prediction. The algorithm uses a techniques of splitting a node from trees to determine the best feature from a random subset of features. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# initiatiate the RandomForestClassifier\n",
    "rf_model = RandomForestClassifier()\n",
    "\n",
    "# fit the classifier to the training data\n",
    "rf_fit = rf_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "rf_pred = rf_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "rf_ac = cross_val_score(rf_model, originalrepo, target, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.1.3. Neural Network (NN) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The neural network below contains three layers: an input layer, a variety of hidden layers, and an output layer. To generate an output layer with the prediction of gender and mask detection. Results are placed in a accuracy per fold folder and a loss per fold folder, to be evaluated in Section 4.1. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Create Keras backend environment for CNN\n",
    "os.environ['KERAS_BACKEND']='tensorflow'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#In order to implement NN, the target dataframe to categorical and one hot encodede\n",
    "#convert target dataset to a numpy array for the NN\n",
    "target = np.array(target)\n",
    "\n",
    "# The number of image categories\n",
    "n_categories = 4\n",
    "\n",
    "# The unique values of categories in the data\n",
    "categories = np.array([\"femalemask\", \"femalenomask\", \"malemask\", \"malenomask\"])\n",
    "\n",
    "# Initialize ohe_labels as all zeros\n",
    "ohe_labels = np.zeros((len(target), n_categories))\n",
    "\n",
    "# Loop over the labels\n",
    "for ii in range(len(target)):\n",
    "    # Find the location of this label in the categories variable\n",
    "    jj = np.where(categories== target[ii])\n",
    "    # Set the corresponding zero to one\n",
    "    ohe_labels[ii, jj] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1273, 10000) (1273, 4) (1273, 10000) (1273, 4)\n"
     ]
    }
   ],
   "source": [
    "print(originalrepo.shape, ohe_labels.shape, originalrepo.shape, ohe_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 1ms/step - loss: 15.5010 - accuracy: 0.2870\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3807 - accuracy: 0.2695\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3789 - accuracy: 0.2915\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3826 - accuracy: 0.2688\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3835 - accuracy: 0.2656\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3807 - accuracy: 0.2745\n",
      "Score for fold 1: loss of 1.3807449340820312; accuracy of 27.450981736183167%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 17.3235 - accuracy: 0.2351\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3839 - accuracy: 0.2552\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3816 - accuracy: 0.2597\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3802 - accuracy: 0.2886\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3791 - accuracy: 0.2692\n",
      "8/8 [==============================] - 0s 4ms/step - loss: 1.3811 - accuracy: 0.2784\n",
      "Score for fold 2: loss of 1.3810632228851318; accuracy of 27.843138575553894%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 1ms/step - loss: 8.6577 - accuracy: 0.2469\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3836 - accuracy: 0.2508\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3846 - accuracy: 0.2779\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3862 - accuracy: 0.2467\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3839 - accuracy: 0.2726\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3811 - accuracy: 0.2784\n",
      "Score for fold 3: loss of 1.3810920715332031; accuracy of 27.843138575553894%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 1ms/step - loss: 200.4121 - accuracy: 0.2182\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3817 - accuracy: 0.2892\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3802 - accuracy: 0.2795\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3829 - accuracy: 0.2645\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3855 - accuracy: 0.2708\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3814 - accuracy: 0.2717\n",
      "Score for fold 4: loss of 1.381436824798584; accuracy of 27.165353298187256%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 52.0991 - accuracy: 0.2609\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3846 - accuracy: 0.2787\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3852 - accuracy: 0.2736\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3840 - accuracy: 0.2624\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3817 - accuracy: 0.2699\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3815 - accuracy: 0.2795\n",
      "Score for fold 5: loss of 1.3814737796783447; accuracy of 27.952754497528076%\n"
     ]
    }
   ],
   "source": [
    "# Import relevant packages\n",
    "from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\n",
    "from keras.utils import np_utils\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "fold_no = 1\n",
    "# Define per-fold score containers \n",
    "acc_per_fold_nn = []\n",
    "loss_per_fold_nn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "data = originalrepo\n",
    "#create train and test set with manual cross validation\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    \n",
    "    #Initiating a sequential model\n",
    "    nn_model = Sequential()\n",
    "    #With the flattened original repository as the input layer. \n",
    "    #Each hidden layer uses the input from the previous layer.\n",
    "    #Assigns numerical weights, combines them before introducing the relu activation function. \n",
    "    #As the size of the images were 100 x 100 this has resulted in the 10000 input shape\n",
    "    #The input nodes have two layers of 10 and before reducing to 4 to represent the number of classes. \n",
    "    nn_model.add(Dense(10, input_shape=(10000,), activation='relu'))\n",
    "    nn_model.add(Dense(10, activation='relu'))\n",
    "    nn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    #The model is then compiled and trained on the training data before applied to the test set.\n",
    "    #Using categorical cross entropy, the Adam optimiser and evaluating its accuracy. \n",
    "    nn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = nn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = nn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {nn_model.metrics_names[0]} of {scores[0]}; {nn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_nn.append(scores[1] * 100)\n",
    "    loss_per_fold_nn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.1.4 Convolutional Neural Network(CNN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convolutional Neural Networks (CNN) share the basic components of a neural network however contain additional layers to improve accuracy on classifying data. CNN perform best when the image data is normalised and converted to a float32 data type.  The training data will be reshaped into four dimensions before passing through and compiled with the Adam optimiser and the loss and accuracy measured for each CV fold. With the steps annotated throught the code.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 27s 129ms/step - loss: 1.4901 - accuracy: 0.3131\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 26s 129ms/step - loss: 1.2076 - accuracy: 0.5035\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.9337 - accuracy: 0.6511\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.5709 - accuracy: 0.7723\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.3409 - accuracy: 0.8873\n",
      "8/8 [==============================] - 1s 108ms/step - loss: 1.2790 - accuracy: 0.5804\n",
      "Score for fold 1: loss of 1.278969645500183; accuracy of 58.03921818733215%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 28s 136ms/step - loss: 1.4945 - accuracy: 0.3376\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 1.0198 - accuracy: 0.5901\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.7368 - accuracy: 0.7241\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.4072 - accuracy: 0.8630\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 136ms/step - loss: 0.2515 - accuracy: 0.9183\n",
      "8/8 [==============================] - 1s 114ms/step - loss: 1.4431 - accuracy: 0.5804\n",
      "Score for fold 2: loss of 1.4431427717208862; accuracy of 58.03921818733215%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 1.5227 - accuracy: 0.3376\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 30s 146ms/step - loss: 0.9952 - accuracy: 0.6109\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.6558 - accuracy: 0.7415\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.4123 - accuracy: 0.8429\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 136ms/step - loss: 0.2997 - accuracy: 0.8968\n",
      "8/8 [==============================] - 1s 118ms/step - loss: 1.4639 - accuracy: 0.6235\n",
      "Score for fold 3: loss of 1.4639337062835693; accuracy of 62.352943420410156%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 136ms/step - loss: 1.4843 - accuracy: 0.3614\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 28s 136ms/step - loss: 1.0717 - accuracy: 0.5965\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.7232 - accuracy: 0.7456\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.4413 - accuracy: 0.8385\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 144ms/step - loss: 0.2971 - accuracy: 0.8900\n",
      "8/8 [==============================] - 1s 129ms/step - loss: 1.4020 - accuracy: 0.5748\n",
      "Score for fold 4: loss of 1.4019635915756226; accuracy of 57.48031735420227%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 139ms/step - loss: 1.5018 - accuracy: 0.3295\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 140ms/step - loss: 1.0528 - accuracy: 0.5919\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 140ms/step - loss: 0.7786 - accuracy: 0.7010\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 0.4766 - accuracy: 0.8257\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.2585 - accuracy: 0.9034\n",
      "8/8 [==============================] - 1s 143ms/step - loss: 1.4868 - accuracy: 0.5472\n",
      "Score for fold 5: loss of 1.486788034439087; accuracy of 54.72440719604492%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Define per-fold score containers \n",
    "acc_per_fold_cnn = []\n",
    "loss_per_fold_cnn = []\n",
    "\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "data = originalrepo\n",
    "fold_no = 1\n",
    "\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    \n",
    "    # Reshape the dataset into 4D array\n",
    "    x_train_kf = x_train_kf.reshape(x_train_kf.shape[0], 100, 100, 1)\n",
    "    x_val_kf = x_val_kf.reshape(x_val_kf.shape[0], 100, 100, 1)\n",
    "\n",
    "    # Convert dataset into a float32\n",
    "    x_train_kf = x_train_kf.astype('float32')\n",
    "    x_val_kf = x_val_kf.astype('float32')\n",
    "\n",
    "    # Normalise the dataset\n",
    "    x_train_kf /= 255\n",
    "    x_val_kf /= 255\n",
    "\n",
    "    #The CNN will be sequential with two convolutional layers,\n",
    "    #It computes 32 filters over the input with a response map that is 26 x 26 in size.\n",
    "    # The size of the patches is 3 x 3 and the depth of the output feature map is 32.\n",
    "    cnn_model = Sequential()\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(100,100,1)))\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "    #max pooling of size 2×2 \n",
    "    #xtracts windows from the input much like a convolution and halves the feature map. \n",
    "    cnn_model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    #dropout of 0.25. \n",
    "    cnn_model.add(Dropout(0.25))\n",
    "    #Before flattening and adding a dense layer with relu activation.  \n",
    "    cnn_model.add(Flatten())\n",
    "    cnn_model.add(Dense(128, activation='relu'))\n",
    "    #A dropout value of 0.5, and seond dense layer with softmax activation function is passed through. \n",
    "    cnn_model.add(Dropout(0.5))\n",
    "    cnn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    cnn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = cnn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = cnn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {cnn_model.metrics_names[0]} of {scores[0]}; {cnn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_cnn.append(scores[1] * 100)\n",
    "    loss_per_fold_cnn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2. Binarised Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# import the relevant packages\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(binarisedrepo, target, stratify=target, test_size=0.2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.2.1. SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Support Vector Classifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# Initiatiate the SVC\n",
    "bin_svc_model = SVC()\n",
    "\n",
    "# Fit theclassifier to the training data\n",
    "bin_svc_fit = bin_svc_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict the model with the test data\n",
    "bin_svc_pred = bin_svc_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "bin_svc_ac = cross_val_score(bin_svc_model, binarisedrepo, target, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.2.3. RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Initiatiate the RandomForestClassifier\n",
    "bin_rf_model = RandomForestClassifier()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "bin_rf_fit = bin_rf_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict the model with the test data\n",
    "bin_rf_pred = bin_rf_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "bin_rf_ac = cross_val_score(bin_rf_model, binarisedrepo, target, cv=5, scoring = 'accuracy')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " #### 3.2.3. NN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 10.9603 - accuracy: 0.2125\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7602 - accuracy: 0.2678\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3886 - accuracy: 0.2728\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3694 - accuracy: 0.2537\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3582 - accuracy: 0.2761\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.4576 - accuracy: 0.2784\n",
      "Score for fold 1: loss of 1.4576337337493896; accuracy of 27.843138575553894%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 7.3442 - accuracy: 0.2556\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3646 - accuracy: 0.2823\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3572 - accuracy: 0.3079\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3593 - accuracy: 0.2947\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3627 - accuracy: 0.3006\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.4663 - accuracy: 0.2824\n",
      "Score for fold 2: loss of 1.4662619829177856; accuracy of 28.23529541492462%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 17.8980 - accuracy: 0.2412\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.6220 - accuracy: 0.2644\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.6373 - accuracy: 0.2706\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3659 - accuracy: 0.2972\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3872 - accuracy: 0.2890\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3836 - accuracy: 0.2863\n",
      "Score for fold 3: loss of 1.3836184740066528; accuracy of 28.62745225429535%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 35.3573 - accuracy: 0.2589\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.4153 - accuracy: 0.2706\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.4051 - accuracy: 0.2974\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3706 - accuracy: 0.2595\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3550 - accuracy: 0.2855\n",
      "8/8 [==============================] - 0s 5ms/step - loss: 1.4126 - accuracy: 0.2677\n",
      "Score for fold 4: loss of 1.4126108884811401; accuracy of 26.771652698516846%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 32.8321 - accuracy: 0.2551\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 2.4571 - accuracy: 0.2809\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.6711 - accuracy: 0.2755\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3817 - accuracy: 0.2555\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.3496 - accuracy: 0.2900\n",
      "8/8 [==============================] - 0s 4ms/step - loss: 1.5025 - accuracy: 0.2598\n",
      "Score for fold 5: loss of 1.5024993419647217; accuracy of 25.984251499176025%\n"
     ]
    }
   ],
   "source": [
    "data = binarisedrepo\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_bin_nn = []\n",
    "loss_per_fold_bin_nn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create train and test set \n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    #create model architecture\n",
    "    nn_model = Sequential()\n",
    "    nn_model.add(Dense(10, input_shape=(10000,), activation='relu'))\n",
    "    nn_model.add(Dense(10, activation='relu'))\n",
    "    nn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    nn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = nn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = nn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {nn_model.metrics_names[0]} of {scores[0]}; {nn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_bin_nn.append(scores[1] * 100)\n",
    "    loss_per_fold_bin_nn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.2.4. CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 30s 142ms/step - loss: 1.5274 - accuracy: 0.2984\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 1.0760 - accuracy: 0.5892\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 0.4713 - accuracy: 0.8436\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 30s 148ms/step - loss: 0.1626 - accuracy: 0.9479s - l - ETA: 0s - loss: 0.1622 - accura\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 31s 153ms/step - loss: 0.1153 - accuracy: 0.9510\n",
      "8/8 [==============================] - 1s 107ms/step - loss: 1.9432 - accuracy: 0.4392\n",
      "Score for fold 1: loss of 1.9431887865066528; accuracy of 43.92156898975372%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 28s 135ms/step - loss: 1.4562 - accuracy: 0.2932\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 28s 136ms/step - loss: 1.0024 - accuracy: 0.6046\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 135ms/step - loss: 0.3258 - accuracy: 0.8987\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 138ms/step - loss: 0.1749 - accuracy: 0.9369\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.0776 - accuracy: 0.9760\n",
      "8/8 [==============================] - 1s 105ms/step - loss: 2.3207 - accuracy: 0.4353\n",
      "Score for fold 2: loss of 2.3207263946533203; accuracy of 43.529412150382996%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 136ms/step - loss: 1.4147 - accuracy: 0.2833\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 28s 138ms/step - loss: 1.1154 - accuracy: 0.5514\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.5630 - accuracy: 0.7948\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 137ms/step - loss: 0.1926 - accuracy: 0.9327\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 135ms/step - loss: 0.1196 - accuracy: 0.9612\n",
      "8/8 [==============================] - 1s 108ms/step - loss: 1.9283 - accuracy: 0.4627\n",
      "Score for fold 3: loss of 1.9283020496368408; accuracy of 46.27451002597809%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 139ms/step - loss: 1.4498 - accuracy: 0.2559\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 31s 150ms/step - loss: 1.1376 - accuracy: 0.5386\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 143ms/step - loss: 0.5534 - accuracy: 0.8109\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 0.2271 - accuracy: 0.9336\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.1392 - accuracy: 0.9527\n",
      "8/8 [==============================] - 1s 114ms/step - loss: 2.2581 - accuracy: 0.4094\n",
      "Score for fold 4: loss of 2.2580740451812744; accuracy of 40.94488322734833%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 30s 142ms/step - loss: 1.4679 - accuracy: 0.2672\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 1.1476 - accuracy: 0.4988\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.6382 - accuracy: 0.7736\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.2238 - accuracy: 0.9370\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 30s 148ms/step - loss: 0.1059 - accuracy: 0.9659\n",
      "8/8 [==============================] - 1s 115ms/step - loss: 2.0152 - accuracy: 0.4685\n",
      "Score for fold 5: loss of 2.0152461528778076; accuracy of 46.85039222240448%\n"
     ]
    }
   ],
   "source": [
    "# Import relevant packages\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\n",
    "from keras.utils import np_utils\n",
    "\n",
    "data = binarisedrepo\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_bin_cnn = []\n",
    "loss_per_fold_bin_cnn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create train and test set \n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    \n",
    "    \n",
    "    # Reshape the dataset into 4D array\n",
    "    x_train_kf = x_train_kf.reshape(x_train_kf.shape[0], 100, 100, 1)\n",
    "    x_val_kf = x_val_kf.reshape(x_val_kf.shape[0], 100, 100, 1)\n",
    "\n",
    "    # Convert dataset into a float32\n",
    "    x_train_kf = x_train_kf.astype('float32')\n",
    "    x_val_kf = x_val_kf.astype('float32')\n",
    "\n",
    "    # Normalise the dataset\n",
    "    x_train_kf /= 255\n",
    "    x_val_kf /= 255\n",
    "    #create model architecture\n",
    "    cnn_model = Sequential()\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(100,100,1)))\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "    cnn_model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    cnn_model.add(Dropout(0.25))\n",
    "    cnn_model.add(Flatten())\n",
    "    cnn_model.add(Dense(128, activation='relu'))\n",
    "    cnn_model.add(Dropout(0.5))\n",
    "    cnn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    cnn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = cnn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = cnn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {cnn_model.metrics_names[0]} of {scores[0]}; {cnn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_bin_cnn.append(scores[1] * 100)\n",
    "    loss_per_fold_bin_cnn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3. Hog Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# import the relevant packages\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(hogrepo, target, stratify=target, test_size=0.2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3.1. SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import Support Vector Classifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# initiatiate the SVC\n",
    "hog_svc_model = SVC()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "hog_svc_fit = hog_svc_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "hog_svc_pred = hog_svc_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "hog_svc_ac = cross_val_score(hog_svc_model, hogrepo, target, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3.2. RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# initiatiate the RandomForestClassifier\n",
    "hog_rf_model = RandomForestClassifier()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "hog_rf_fit = hog_rf_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "hog_rf_pred = hog_rf_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "hog_rf_ac = cross_val_score(hog_rf_model, hogrepo, target, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3.3. NN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.3866 - accuracy: 0.2873\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3250 - accuracy: 0.3748\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.2429 - accuracy: 0.4461\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.1295 - accuracy: 0.5550\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.0151 - accuracy: 0.5835\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.3291 - accuracy: 0.4275\n",
      "Score for fold 1: loss of 1.3291131258010864; accuracy of 42.74509847164154%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 1ms/step - loss: 1.3768 - accuracy: 0.2775\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3172 - accuracy: 0.3358\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.2693 - accuracy: 0.3813\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.1782 - accuracy: 0.4191\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.0875 - accuracy: 0.5238\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 1.2957 - accuracy: 0.4196\n",
      "Score for fold 2: loss of 1.2956912517547607; accuracy of 41.960784792900085%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.3824 - accuracy: 0.2877\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.2840 - accuracy: 0.3942\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.1804 - accuracy: 0.4676\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.1106 - accuracy: 0.5398\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.0244 - accuracy: 0.5554\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 1.2528 - accuracy: 0.4000\n",
      "Score for fold 3: loss of 1.2528339624404907; accuracy of 40.00000059604645%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.3806 - accuracy: 0.2902\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3186 - accuracy: 0.3482\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.2205 - accuracy: 0.4631\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.0939 - accuracy: 0.5637\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 0.9958 - accuracy: 0.5738\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 1.2944 - accuracy: 0.4213\n",
      "Score for fold 4: loss of 1.294379711151123; accuracy of 42.12598502635956%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.3831 - accuracy: 0.2995\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.3230 - accuracy: 0.3901\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.2313 - accuracy: 0.4550\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.2153 - accuracy: 0.4500\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 1ms/step - loss: 1.1355 - accuracy: 0.5321\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.2930 - accuracy: 0.4449\n",
      "Score for fold 5: loss of 1.2929898500442505; accuracy of 44.48818862438202%\n"
     ]
    }
   ],
   "source": [
    "data = hogrepo\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_hog_nn = []\n",
    "loss_per_fold_hog_nn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create train and test set \n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    #create model architecture\n",
    "    nn_model = Sequential()\n",
    "    nn_model.add(Dense(10, input_shape=(1800,), activation='relu'))\n",
    "    nn_model.add(Dense(10, activation='relu'))\n",
    "    nn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    nn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = nn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = nn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {nn_model.metrics_names[0]} of {scores[0]}; {nn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_hog_nn.append(scores[1] * 100)\n",
    "    loss_per_fold_hog_nn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3.4. CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1273, 1800), (1273, 4))"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hogrepo.shape, ohe_labels.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 6s 24ms/step - loss: 1.3861 - accuracy: 0.2532\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3821 - accuracy: 0.2802\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3809 - accuracy: 0.2521\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3851 - accuracy: 0.2530\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3796 - accuracy: 0.2797\n",
      "8/8 [==============================] - 0s 19ms/step - loss: 1.3807 - accuracy: 0.2784\n",
      "Score for fold 1: loss of 1.380671739578247; accuracy of 27.843138575553894%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 6s 25ms/step - loss: 1.3865 - accuracy: 0.2376\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 5s 25ms/step - loss: 1.3827 - accuracy: 0.2914\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 5s 24ms/step - loss: 1.3797 - accuracy: 0.2732\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 4s 22ms/step - loss: 1.3864 - accuracy: 0.2432 0s - loss: 1.3867 - accura\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 4s 22ms/step - loss: 1.3798 - accuracy: 0.2744\n",
      "8/8 [==============================] - 0s 18ms/step - loss: 1.3807 - accuracy: 0.2784\n",
      "Score for fold 2: loss of 1.3807339668273926; accuracy of 27.843138575553894%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3873 - accuracy: 0.2272\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 4s 21ms/step - loss: 1.3827 - accuracy: 0.2842\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 4s 22ms/step - loss: 1.3829 - accuracy: 0.2772\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3816 - accuracy: 0.2807\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3838 - accuracy: 0.2791\n",
      "8/8 [==============================] - 0s 19ms/step - loss: 1.3808 - accuracy: 0.2784\n",
      "Score for fold 3: loss of 1.3807625770568848; accuracy of 27.843138575553894%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 6s 22ms/step - loss: 1.3938 - accuracy: 0.2589\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3813 - accuracy: 0.2748\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3800 - accuracy: 0.2796\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3779 - accuracy: 0.2941\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3782 - accuracy: 0.2658\n",
      "8/8 [==============================] - 0s 19ms/step - loss: 1.3811 - accuracy: 0.2795\n",
      "Score for fold 4: loss of 1.381062626838684; accuracy of 27.952754497528076%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3861 - accuracy: 0.2831\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3842 - accuracy: 0.2647\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3813 - accuracy: 0.2919\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 5s 23ms/step - loss: 1.3812 - accuracy: 0.2757\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 5s 22ms/step - loss: 1.3795 - accuracy: 0.2759\n",
      "8/8 [==============================] - 0s 20ms/step - loss: 1.3811 - accuracy: 0.2717\n",
      "Score for fold 5: loss of 1.3810559511184692; accuracy of 27.165353298187256%\n"
     ]
    }
   ],
   "source": [
    "# Import relevant packages\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\n",
    "from keras.utils import np_utils\n",
    "\n",
    "data = hogrepo\n",
    "fold_no = 1\n",
    "\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_hog_cnn = []\n",
    "loss_per_fold_hog_cnn = []\n",
    "\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create train and test set \n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels[train_index], ohe_labels[val_index]\n",
    "    \n",
    "    \n",
    "    # Reshape the dataset into 4D array\n",
    "    x_train_kf = x_train_kf.reshape(x_train_kf.shape[0], 10, 180, 1)\n",
    "    x_val_kf = x_val_kf.reshape(x_val_kf.shape[0], 10, 180, 1)\n",
    "\n",
    "    # Convert dataset into a float32\n",
    "    x_train_kf = x_train_kf.astype('float32')\n",
    "    x_val_kf = x_val_kf.astype('float32')\n",
    "\n",
    "    # Normalise the dataset\n",
    "    x_train_kf /= 255\n",
    "    x_val_kf /= 255\n",
    "\n",
    "    #create model architecture\n",
    "    cnn_model = Sequential()\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(10,180,1)))\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "    cnn_model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    cnn_model.add(Dropout(0.25))\n",
    "    cnn_model.add(Flatten())\n",
    "    cnn_model.add(Dense(128, activation='relu'))\n",
    "    cnn_model.add(Dropout(0.5))\n",
    "    cnn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    cnn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = cnn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = cnn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {cnn_model.metrics_names[0]} of {scores[0]}; {cnn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_hog_cnn.append(scores[1] * 100)\n",
    "    loss_per_fold_hog_cnn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.4. ROS Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# import the relevant packages\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(hogrepo_ros, target_ros, stratify=target_ros, test_size=0.2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.4.1. SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import Support Vector Classifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# initiatiate the SVC\n",
    "hogros_svc_model = SVC()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "hogros_svc_fit = hogros_svc_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "hogros_svc_pred = hogros_svc_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "hogros_svc_ac = cross_val_score(hogros_svc_model, hogrepo_ros, target_ros, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.4.2. RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# initiatiate the RandomForestClassifier\n",
    "hogros_rf_model = RandomForestClassifier()\n",
    "\n",
    "# fit the classifier to the training data\n",
    "hogros_rf_fit = hogros_rf_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "hogros_rf_pred = hogros_rf_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "hogros_rf_ac = cross_val_score(hogros_rf_model, hogrepo_ros, target_ros, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.4.3. NN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As the ROS repository has augmented the shape of the data compared to the previous repositories resulting in the 1800 shape compared to 10000. \n",
    "#This is reflected in the input shape layer of the NN and CNN model architecture. \n",
    "\n",
    "#convert target dataset to a numpy array for the NN\n",
    "target_ros = np.array(target_ros)\n",
    "\n",
    "# The number of image categories\n",
    "n_categories = 4\n",
    "\n",
    "# The unique values of categories in the data\n",
    "categories = np.array([\"femalemask\",  \"femalenomask\", \"malemask\", \"malenomask\"])\n",
    "\n",
    "# Initialize ohe_labels as all zeros\n",
    "ohe_labels_ros = np.zeros((len(target_ros), n_categories))\n",
    "\n",
    "# Loop over the labels\n",
    "for ii in range(len(target_ros)):\n",
    "    # Find the location of this label in the categories variable\n",
    "    jj = np.where(categories== target_ros[ii])\n",
    "    # Set the corresponding zero to one\n",
    "    ohe_labels_ros[ii, jj] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 1s 2ms/step - loss: 1.3835 - accuracy: 0.2502\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 1.3211 - accuracy: 0.3874\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 1.2038 - accuracy: 0.4636\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 1.1005 - accuracy: 0.5462\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 0.9993 - accuracy: 0.5821\n",
      "9/9 [==============================] - 0s 4ms/step - loss: 1.2507 - accuracy: 0.4507\n",
      "Score for fold 1: loss of 1.2507293224334717; accuracy of 45.07042169570923%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 1s 1ms/step - loss: 1.3699 - accuracy: 0.2925\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.2812 - accuracy: 0.3610\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.1866 - accuracy: 0.4903\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.0807 - accuracy: 0.5582\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.0228 - accuracy: 0.5731\n",
      "9/9 [==============================] - 0s 3ms/step - loss: 1.2243 - accuracy: 0.4437\n",
      "Score for fold 2: loss of 1.224323034286499; accuracy of 44.36619579792023%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 1s 2ms/step - loss: 1.3873 - accuracy: 0.2374\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.3171 - accuracy: 0.4024\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 1.1634 - accuracy: 0.5017\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.0432 - accuracy: 0.5859\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 0.9412 - accuracy: 0.6328\n",
      "9/9 [==============================] - 0s 2ms/step - loss: 1.1868 - accuracy: 0.5246\n",
      "Score for fold 3: loss of 1.1868133544921875; accuracy of 52.464789152145386%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 1s 2ms/step - loss: 1.3938 - accuracy: 0.2399\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.3183 - accuracy: 0.3680\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.1962 - accuracy: 0.4711\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.0794 - accuracy: 0.5551\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 0.9860 - accuracy: 0.5935\n",
      "9/9 [==============================] - 0s 2ms/step - loss: 1.1420 - accuracy: 0.5070\n",
      "Score for fold 4: loss of 1.1419552564620972; accuracy of 50.70422291755676%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 1s 2ms/step - loss: 1.3845 - accuracy: 0.3034\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.2833 - accuracy: 0.3899\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 1.1497 - accuracy: 0.4699\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 0s 2ms/step - loss: 1.0660 - accuracy: 0.5380\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 0s 1ms/step - loss: 0.9410 - accuracy: 0.6313\n",
      "9/9 [==============================] - 0s 3ms/step - loss: 1.3287 - accuracy: 0.4261\n",
      "Score for fold 5: loss of 1.3286994695663452; accuracy of 42.60563254356384%\n"
     ]
    }
   ],
   "source": [
    "data = hogrepo_ros\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_hog_ros_nn = []\n",
    "loss_per_fold_hog_ros_nn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create test and train set\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels_ros.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels_ros[train_index], ohe_labels_ros[val_index]\n",
    "    #create model architecture\n",
    "    nn_model = Sequential()\n",
    "    nn_model.add(Dense(10, input_shape=(1800,), activation='relu'))\n",
    "    nn_model.add(Dense(10, activation='relu'))\n",
    "    nn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    nn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = nn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = nn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {nn_model.metrics_names[0]} of {scores[0]}; {nn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_hog_ros_nn.append(scores[1] * 100)\n",
    "    loss_per_fold_hog_ros_nn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.4.4. CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3886 - accuracy: 0.2338\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 6s 28ms/step - loss: 1.3868 - accuracy: 0.2352\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3870 - accuracy: 0.2452 0s - loss: 1.3870 - ac\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3869 - accuracy: 0.2182\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 6s 28ms/step - loss: 1.3867 - accuracy: 0.1972\n",
      "9/9 [==============================] - 0s 21ms/step - loss: 1.3863 - accuracy: 0.2500\n",
      "Score for fold 1: loss of 1.3862979412078857; accuracy of 25.0%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 8s 29ms/step - loss: 1.3877 - accuracy: 0.1838\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 6s 28ms/step - loss: 1.3866 - accuracy: 0.2168 0s - loss: 1.3866 - accuracy: \n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 7s 30ms/step - loss: 1.3866 - accuracy: 0.2453 0s - loss: 1.3866 - ac\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 6s 28ms/step - loss: 1.3867 - accuracy: 0.2388\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 6s 28ms/step - loss: 1.3865 - accuracy: 0.2830 0s - loss:\n",
      "9/9 [==============================] - 0s 23ms/step - loss: 1.3863 - accuracy: 0.2500\n",
      "Score for fold 2: loss of 1.3863017559051514; accuracy of 25.0%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 7s 28ms/step - loss: 1.3870 - accuracy: 0.2456\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3865 - accuracy: 0.2403\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 7s 30ms/step - loss: 1.3865 - accuracy: 0.2404\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3867 - accuracy: 0.2596\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 7s 30ms/step - loss: 1.3864 - accuracy: 0.2580\n",
      "9/9 [==============================] - 0s 22ms/step - loss: 1.3863 - accuracy: 0.2500\n",
      "Score for fold 3: loss of 1.3862967491149902; accuracy of 25.0%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3892 - accuracy: 0.2643\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3873 - accuracy: 0.2342\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 7s 30ms/step - loss: 1.3872 - accuracy: 0.2268\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3862 - accuracy: 0.2696\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 7s 29ms/step - loss: 1.3862 - accuracy: 0.2682\n",
      "9/9 [==============================] - 0s 22ms/step - loss: 1.3863 - accuracy: 0.2500\n",
      "Score for fold 4: loss of 1.3863096237182617; accuracy of 25.0%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "228/228 [==============================] - 8s 29ms/step - loss: 1.3887 - accuracy: 0.2494\n",
      "Epoch 2/5\n",
      "228/228 [==============================] - ETA: 0s - loss: 1.3865 - accuracy: 0.25 - 7s 30ms/step - loss: 1.3865 - accuracy: 0.2544\n",
      "Epoch 3/5\n",
      "228/228 [==============================] - 7s 32ms/step - loss: 1.3868 - accuracy: 0.2379 0s - loss: 1.3868 - accuracy: 0.23\n",
      "Epoch 4/5\n",
      "228/228 [==============================] - 7s 31ms/step - loss: 1.3864 - accuracy: 0.2694\n",
      "Epoch 5/5\n",
      "228/228 [==============================] - 7s 30ms/step - loss: 1.3872 - accuracy: 0.2260\n",
      "9/9 [==============================] - 0s 23ms/step - loss: 1.3863 - accuracy: 0.2500\n",
      "Score for fold 5: loss of 1.386306643486023; accuracy of 25.0%\n"
     ]
    }
   ],
   "source": [
    "# Import relevant packages\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\n",
    "from keras.utils import np_utils\n",
    "\n",
    "data = hogrepo_ros\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_hog_ros_cnn = []\n",
    "loss_per_fold_hog_ros_cnn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create test and train set\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels_ros.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels_ros[train_index], ohe_labels_ros[val_index]\n",
    "    \n",
    "    \n",
    "    # Reshape the dataset into 4D array\n",
    "    x_train_kf = x_train_kf.reshape(x_train_kf.shape[0], 100, 18, 1)\n",
    "    x_val_kf = x_val_kf.reshape(x_val_kf.shape[0], 100, 18, 1)\n",
    "\n",
    "    # Convert dataset into a float32\n",
    "    x_train_kf = x_train_kf.astype('float32')\n",
    "    x_val_kf = x_val_kf.astype('float32')\n",
    "\n",
    "    # Normalise the dataset\n",
    "    x_train_kf /= 255\n",
    "    x_val_kf /= 255\n",
    "    #create model architecture\n",
    "    cnn_model = Sequential()\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(100, 18,1)))\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "    cnn_model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    cnn_model.add(Dropout(0.25))\n",
    "    cnn_model.add(Flatten())\n",
    "    cnn_model.add(Dense(128, activation='relu'))\n",
    "    cnn_model.add(Dropout(0.5))\n",
    "    cnn_model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    cnn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = cnn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = cnn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {cnn_model.metrics_names[0]} of {scores[0]}; {cnn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_hog_ros_cnn.append(scores[1] * 100)\n",
    "    loss_per_fold_hog_ros_cnn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.5. Class Decomposition Repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# import the relevant packages\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(originalrepo, target_cd, stratify=target_cd, test_size=0.2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.5.1. SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import Support Vector Classifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# initiatiate the SVC\n",
    "cd_svc_model = SVC()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "cd_svc_fit = cd_svc_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "cd_svc_pred = cd_svc_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "cd_svc_ac = cross_val_score(cd_svc_model, originalrepo, target_cd, cv=5, scoring = 'accuracy')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.5.2. RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# initiatiate the RandomForestClassifier\n",
    "cd_rf_model = RandomForestClassifier()\n",
    "\n",
    "# fit theclassifier to the training data\n",
    "cd_rf_fit = cd_rf_model.fit(X_train, y_train)\n",
    "\n",
    "# predict the model with the test data\n",
    "cd_rf_pred = cd_rf_model.predict(X_test)\n",
    "\n",
    "#evaluate model\n",
    "cd_rf_ac = cross_val_score(cd_rf_model, originalrepo, target_cd, cv=5, scoring = 'accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.5.3. NN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The NN and CNN of the class decomposition model will have extra classifiers. \n",
    "#This results in the target dataframe to be one hot encoded to ensure it reflects the six classifiers within. \n",
    "\n",
    "#convert target dataset to a numpy array for the NN\n",
    "target_cd = np.array(target_cd)\n",
    "\n",
    "# The number of image categories\n",
    "n_categories = 6\n",
    "\n",
    "# The unique values of categories in the data\n",
    "categories = np.array([\"femalemask_c0\", \"femalemask_c1\", \"femalenomask_c0\", \"malemask_c0\", \"malemask_c1\", \"malenomask_c0\"])\n",
    "\n",
    "# Initialize ohe_labels as all zeros\n",
    "ohe_labels_cd = np.zeros((len(target_cd), n_categories))\n",
    "\n",
    "# Loop over the labels\n",
    "for ii in range(len(target_cd)):\n",
    "    # Find the location of this label in the categories variable\n",
    "    jj = np.where(categories== target_cd[ii])\n",
    "    # Set the corresponding zero to one\n",
    "    ohe_labels_cd[ii, jj] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 3ms/step - loss: 20.1653 - accuracy: 0.2049\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7407 - accuracy: 0.1731\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7251 - accuracy: 0.2053\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7083 - accuracy: 0.2298\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7032 - accuracy: 0.2418\n",
      "8/8 [==============================] - 0s 5ms/step - loss: 1.7046 - accuracy: 0.2235\n",
      "Score for fold 1: loss of 1.7046458721160889; accuracy of 22.35294133424759%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 27.0000 - accuracy: 0.2166\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.7582 - accuracy: 0.2094\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.7395 - accuracy: 0.2448\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7198 - accuracy: 0.2413\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7188 - accuracy: 0.2320\n",
      "8/8 [==============================] - 0s 5ms/step - loss: 1.7140 - accuracy: 0.2235\n",
      "Score for fold 2: loss of 1.7140083312988281; accuracy of 22.35294133424759%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 18.5703 - accuracy: 0.1904\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7534 - accuracy: 0.2331\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7290 - accuracy: 0.2459\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7095 - accuracy: 0.2248\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7112 - accuracy: 0.2226 ETA: 0s - loss: 1.7243 - \n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.7049 - accuracy: 0.2235\n",
      "Score for fold 3: loss of 1.7049304246902466; accuracy of 22.35294133424759%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 12.8096 - accuracy: 0.2029\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 1.7497 - accuracy: 0.2260\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7101 - accuracy: 0.2120\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7190 - accuracy: 0.2100\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.6976 - accuracy: 0.2377\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 1.7044 - accuracy: 0.2244\n",
      "Score for fold 4: loss of 1.7043981552124023; accuracy of 22.440944612026215%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 1s 2ms/step - loss: 23.6246 - accuracy: 0.2225\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7400 - accuracy: 0.2388\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7127 - accuracy: 0.2119\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7088 - accuracy: 0.2221\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 0s 2ms/step - loss: 1.7018 - accuracy: 0.2245\n",
      "8/8 [==============================] - 0s 5ms/step - loss: 1.6941 - accuracy: 0.2244\n",
      "Score for fold 5: loss of 1.694091796875; accuracy of 22.440944612026215%\n"
     ]
    }
   ],
   "source": [
    "#Changes are also found within NN and CNN architecture in the final layer of each model before compilation.  \n",
    "data = originalrepo\n",
    "fold_no = 1\n",
    "# Define per-fold score containers <-- these are new\n",
    "acc_per_fold_cd_nn = []\n",
    "loss_per_fold_cd_nn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create test and train set\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels_cd.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels_cd[train_index], ohe_labels_cd[val_index]\n",
    "    #create model architecture\n",
    "    nn_model = Sequential()\n",
    "    nn_model.add(Dense(10, input_shape=(10000,), activation='relu'))\n",
    "    nn_model.add(Dense(10, activation='relu'))\n",
    "    nn_model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    nn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = nn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = nn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {nn_model.metrics_names[0]} of {scores[0]}; {nn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_cd_nn.append(scores[1] * 100)\n",
    "    loss_per_fold_cd_nn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.5.4. CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed for reproducibility\n",
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for fold 0\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 30s 143ms/step - loss: 2.0541 - accuracy: 0.2636\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 30s 145ms/step - loss: 1.5203 - accuracy: 0.3914\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 30s 147ms/step - loss: 1.2276 - accuracy: 0.5444\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 29s 144ms/step - loss: 0.8749 - accuracy: 0.6914\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.5335 - accuracy: 0.8230\n",
      "8/8 [==============================] - 1s 127ms/step - loss: 1.8697 - accuracy: 0.5176\n",
      "Score for fold 1: loss of 1.8696988821029663; accuracy of 51.76470875740051%\n",
      "Training for fold 1\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 1.8403 - accuracy: 0.2532\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 1.4302 - accuracy: 0.4407\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 143ms/step - loss: 1.0995 - accuracy: 0.6050\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 29s 142ms/step - loss: 0.8954 - accuracy: 0.6801\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 141ms/step - loss: 0.5760 - accuracy: 0.8188\n",
      "8/8 [==============================] - 1s 119ms/step - loss: 1.3440 - accuracy: 0.4980\n",
      "Score for fold 2: loss of 1.343989372253418; accuracy of 49.803921580314636%\n",
      "Training for fold 2\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 140ms/step - loss: 1.8287 - accuracy: 0.2605\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 144ms/step - loss: 1.3581 - accuracy: 0.4729\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 138ms/step - loss: 1.0122 - accuracy: 0.6229\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 139ms/step - loss: 0.6567 - accuracy: 0.7865\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 139ms/step - loss: 0.4412 - accuracy: 0.8595\n",
      "8/8 [==============================] - 1s 115ms/step - loss: 1.4316 - accuracy: 0.4706\n",
      "Score for fold 3: loss of 1.4316178560256958; accuracy of 47.05882370471954%\n",
      "Training for fold 3\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 29s 138ms/step - loss: 1.8365 - accuracy: 0.2583\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 28s 139ms/step - loss: 1.3511 - accuracy: 0.4723\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 28s 140ms/step - loss: 1.0586 - accuracy: 0.6425\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 139ms/step - loss: 0.6254 - accuracy: 0.7532\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 28s 139ms/step - loss: 0.4527 - accuracy: 0.8445\n",
      "8/8 [==============================] - 1s 115ms/step - loss: 1.3293 - accuracy: 0.5276\n",
      "Score for fold 4: loss of 1.3293240070343018; accuracy of 52.75590419769287%\n",
      "Training for fold 4\n",
      "Epoch 1/5\n",
      "204/204 [==============================] - 30s 142ms/step - loss: 1.8806 - accuracy: 0.2634\n",
      "Epoch 2/5\n",
      "204/204 [==============================] - 29s 140ms/step - loss: 1.3776 - accuracy: 0.4539\n",
      "Epoch 3/5\n",
      "204/204 [==============================] - 29s 145ms/step - loss: 1.0339 - accuracy: 0.6114\n",
      "Epoch 4/5\n",
      "204/204 [==============================] - 28s 140ms/step - loss: 0.8135 - accuracy: 0.6923\n",
      "Epoch 5/5\n",
      "204/204 [==============================] - 29s 140ms/step - loss: 0.4674 - accuracy: 0.8383\n",
      "8/8 [==============================] - 1s 120ms/step - loss: 1.5054 - accuracy: 0.5118\n",
      "Score for fold 5: loss of 1.5054469108581543; accuracy of 51.18110179901123%\n"
     ]
    }
   ],
   "source": [
    "# Import relevant packages\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\n",
    "from keras.utils import np_utils\n",
    "\n",
    "data = originalrepo\n",
    "fold_no = 1\n",
    "# Define per-fold score containers \n",
    "acc_per_fold_cd_cnn = []\n",
    "loss_per_fold_cd_cnn = []\n",
    "# Define the K-fold Cross Validator\n",
    "kfold = StratifiedKFold(n_splits=5, shuffle=True)\n",
    "\n",
    "#create test and train set\n",
    "for i, (train_index, val_index) in enumerate(kfold.split(data, ohe_labels_cd.argmax(1))):\n",
    "    x_train_kf, x_val_kf = data[train_index], data[val_index]\n",
    "    y_train_kf, y_val_kf = ohe_labels_cd[train_index], ohe_labels_cd[val_index]\n",
    "\n",
    "    \n",
    "    # Reshape the dataset into 4D array\n",
    "    x_train_kf = x_train_kf.reshape(x_train_kf.shape[0], 100, 100, 1)\n",
    "    x_val_kf = x_val_kf.reshape(x_val_kf.shape[0], 100, 100, 1)\n",
    "\n",
    "    # Convert dataset into a float32\n",
    "    x_train_kf = x_train_kf.astype('float32')\n",
    "    x_val_kf = x_val_kf.astype('float32')\n",
    "\n",
    "    # Normalise the dataset\n",
    "    x_train_kf /= 255\n",
    "    x_val_kf /= 255\n",
    "    \n",
    "    #create model architecture\n",
    "    cnn_model = Sequential()\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(100,100,1)))\n",
    "    cnn_model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "    cnn_model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    cnn_model.add(Dropout(0.25))\n",
    "    cnn_model.add(Flatten())\n",
    "    cnn_model.add(Dense(128, activation='relu'))\n",
    "    cnn_model.add(Dropout(0.5))\n",
    "    cnn_model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    cnn_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    # Generate a print\n",
    "    print(f'Training for fold {i}')\n",
    "\n",
    "    # Fit data to model\n",
    "    history = cnn_model.fit(x_train_kf, y_train_kf,\n",
    "    batch_size=5,\n",
    "    epochs=5)\n",
    "\n",
    "    # Generate generalization metrics\n",
    "    scores = cnn_model.evaluate(x_val_kf, y_val_kf)\n",
    "    print(f'Score for fold {fold_no}: {cnn_model.metrics_names[0]} of {scores[0]}; {cnn_model.metrics_names[1]} of {scores[1]*100}%')\n",
    "    acc_per_fold_cd_cnn.append(scores[1] * 100)\n",
    "    loss_per_fold_cd_cnn.append(scores[0])\n",
    "\n",
    "    # Increase fold number\n",
    "    fold_no = fold_no + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1. Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The mean accuracy results from each dataset and classifier are collected below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original Repository\n",
      "Mean Accuracy for SVM:  55.924656476763936\n",
      "Mean Accuracy for RF:  52.23282383819669\n",
      "Mean Accuracy for NN:  27.651073336601257\n",
      "Mean Accuracy for CNN:  58.12722086906433\n",
      "\n",
      "Binarised Repository\n",
      "Mean Accuracy for SVM:  45.320673151150224\n",
      "Mean Accuracy for RF:  43.98733981781689\n",
      "Mean Accuracy for NN:  27.492358088493347\n",
      "Mean Accuracy for CNN:  44.30415332317352\n",
      "\n",
      "Hog Repository\n",
      "Mean Accuracy for SVM:  46.34058977921878\n",
      "Mean Accuracy for RF:  42.651536205033196\n",
      "Mean Accuracy for NN:  42.26401150226593\n",
      "Mean Accuracy for CNN:  27.729504704475403\n",
      "\n",
      "Hog Ros Repository\n",
      "Mean Accuracy for SVM:  54.64788732394366\n",
      "Mean Accuracy for RF:  55.42253521126761\n",
      "Mean Accuracy for NN:  47.04225242137909\n",
      "Mean Accuracy for CNN:  25.0\n",
      "\n",
      "Class Decomposition\n",
      "Mean Accuracy for SVM:  51.76192681797128\n",
      "Mean Accuracy for RF:  48.462868612011725\n",
      "Mean Accuracy for NN:  22.38814264535904\n",
      "Mean Accuracy for CNN:  50.51289200782776\n"
     ]
    }
   ],
   "source": [
    "#calculate mean accuracy per classifier for Original Repository\n",
    "print('\\nOriginal Repository')\n",
    "print('Mean Accuracy for SVM: ',np.mean(svc_ac)*100)\n",
    "print('Mean Accuracy for RF: ',np.mean(rf_ac)*100)\n",
    "print('Mean Accuracy for NN: ',np.mean(acc_per_fold_nn))\n",
    "print('Mean Accuracy for CNN: ',np.mean(acc_per_fold_cnn))\n",
    "\n",
    "#calculate mean accuracy per classifier for Binarised Repository\n",
    "print('\\nBinarised Repository')\n",
    "print('Mean Accuracy for SVM: ',np.mean(bin_svc_ac)*100)\n",
    "print('Mean Accuracy for RF: ',np.mean(bin_rf_ac)*100)\n",
    "print('Mean Accuracy for NN: ',np.mean(acc_per_fold_bin_nn))\n",
    "print('Mean Accuracy for CNN: ',np.mean(acc_per_fold_bin_cnn))\n",
    "\n",
    "#calculate mean accuracy per classifier for Hog Repository\n",
    "print('\\nHog Repository')\n",
    "print('Mean Accuracy for SVM: ',np.mean(hog_svc_ac)*100)\n",
    "print('Mean Accuracy for RF: ',np.mean(hog_rf_ac)*100)\n",
    "print('Mean Accuracy for NN: ',np.mean(acc_per_fold_hog_nn))\n",
    "print('Mean Accuracy for CNN: ',np.mean(acc_per_fold_hog_cnn))\n",
    "\n",
    "#calculate mean accuracy per classifier for Hog Ros Repository\n",
    "print('\\nHog Ros Repository')\n",
    "print('Mean Accuracy for SVM: ',np.mean(hogros_svc_ac)*100)\n",
    "print('Mean Accuracy for RF: ',np.mean(hogros_rf_ac)*100)\n",
    "print('Mean Accuracy for NN: ',np.mean(acc_per_fold_hog_ros_nn))\n",
    "print('Mean Accuracy for CNN: ',np.mean(acc_per_fold_hog_ros_cnn))\n",
    "\n",
    "#calculate mean accuracy per classifier for Class Decomposition\n",
    "print('\\nClass Decomposition')\n",
    "print('Mean Accuracy for SVM: ',np.mean(cd_svc_ac)*100)\n",
    "print('Mean Accuracy for RF: ',np.mean(cd_rf_ac)*100)\n",
    "print('Mean Accuracy for NN: ',np.mean(acc_per_fold_cd_nn))\n",
    "print('Mean Accuracy for CNN: ',np.mean(acc_per_fold_cd_cnn))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the collected mean accuracies, it is clear that the classifier with the highest accuracy for mask detection and the gender assignment is the original repository with a CNN at 58% average accuracy with fivefold cross validation. This makes sense due to the design of CNN is aimed for image data \n",
    "\n",
    "All datasets with four classes should have a 25% accuracy considering mathematically the chance of correctly classifying is one in four. This would be 20% accuracy for class decomposition model as it is between one in six classes. This highlights when a model particularly does poorly, such as the CNN for the HOG repository and the HOG ROS repository with the average accuracy of 28% and 25% respectively. Showing a slight improvement than chance and suggesting problems with the model. This seems clear when evaluating the loss function in the CNN in Section 3.3.4 and NN in Section 3.4.3. As the value decreases the model is learning however in these two specific cases this very minimal with their classification.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Mean Accuracy per Repository\n",
      "Total Mean Accuracy for OR 48.48394363015656\n",
      "Total Mean Accuracy for BR 40.2761310951585\n",
      "Total Mean Accuracy for HOG 39.746410547748326\n",
      "Total Mean Accuracy for HOG ROS 45.52816873914759\n",
      "Total Mean Accuracy for CD 43.28145752079246\n",
      "\n",
      "Mean Accuracy per Classifier\n",
      "Total Mean Accuracy for SVM 50.799146709809584\n",
      "Total Mean Accuracy for RF 48.55142073686523\n",
      "Total Mean Accuracy for NN 33.36756759881973\n",
      "Total Mean Accuracy for CNN 41.1347541809082\n",
      "\n",
      "From the results, it states that the original repository has the greatest accuracy of 49%, compared to the NN, the lowest accuracy, with only 34%. The highest is SVM with 51% average accuracy in correctly classifying the images for gender and mask detection.\n"
     ]
    }
   ],
   "source": [
    "print('\\nMean Accuracy per Repository')\n",
    "print('Total Mean Accuracy for OR', np.mean([(svc_ac)*100, (rf_ac)*100, acc_per_fold_nn, acc_per_fold_cnn]))\n",
    "print('Total Mean Accuracy for BR', np.mean([(bin_svc_ac)*100, (bin_rf_ac)*100, acc_per_fold_bin_nn, acc_per_fold_bin_cnn]))\n",
    "print('Total Mean Accuracy for HOG', np.mean([(hog_svc_ac)*100, (hog_rf_ac)*100, acc_per_fold_hog_nn, acc_per_fold_hog_cnn]))\n",
    "print('Total Mean Accuracy for HOG ROS', np.mean([(hogros_svc_ac)*100, (hogros_rf_ac)*100, acc_per_fold_hog_ros_nn, acc_per_fold_hog_ros_cnn]))\n",
    "print('Total Mean Accuracy for CD', np.mean([(cd_svc_ac)*100, (cd_rf_ac)*100, acc_per_fold_cd_nn, acc_per_fold_cd_cnn]))\n",
    "\n",
    "print('\\nMean Accuracy per Classifier')\n",
    "print('Total Mean Accuracy for SVM', np.mean([(svc_ac)*100, (bin_svc_ac)*100, (hog_svc_ac)*100, (hogros_svc_ac)*100, (cd_svc_ac)*100]))                                             \n",
    "print('Total Mean Accuracy for RF', np.mean([(rf_ac)*100, (bin_rf_ac)*100, (hog_rf_ac)*100, (hogros_rf_ac)*100, (cd_rf_ac)*100]))\n",
    "print('Total Mean Accuracy for NN', np.mean([acc_per_fold_nn, acc_per_fold_bin_nn, acc_per_fold_hog_nn, acc_per_fold_hog_ros_nn, acc_per_fold_cd_nn]))                                           \n",
    "print('Total Mean Accuracy for CNN', np.mean([acc_per_fold_cnn, acc_per_fold_bin_cnn, acc_per_fold_hog_cnn, acc_per_fold_hog_ros_cnn, acc_per_fold_cd_cnn]))\n",
    "\n",
    "print('\\nFrom the repository results, it states that the original repository has the greatest mean accuracy of 48%, compared to the HOG repository, the lowest , with only 39% mean accuracy.\n",
    "print('\\nFrom the classifier results, the highest is SVM with 51% mean accuracy in correctly classifying the images for gender and mask detection. With NN at the lowest with 33% mean accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Overall, the best model to classify gender with mask detection is the Random Forest model using CNN from these experiments. However, individually the SVM would be a better classifier choice on average with accuracy and the original repository has highest mean accuracy out of the repositories. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  4.2 Improvements to the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing the amount of data, by 1000 images for example, can advance the training of each classifier and enhance its predictions. The better quality the images, the more features to extract to distinguish who has a mask on or what gender. Therefore, accuracy could be improved by increasing the quantity and quality of images.\n",
    "\n",
    "Each classifier can apply additional parameters to improve. Both SVM and RF have tuning capabilities, with SVM offering a variety of kernels and RF providing settings for the number of trees to use. NN and CNN could add additional layers or increase the input nodes for deeper training. By increasing the epochs to around 100 instead of 5 to elevate accuracy. CNN can also include a padding feature which would allow selecting the features in the model to correct predictions.\n",
    "\n",
    "Overall, further experimentation with different data and parameters into each specific classifier could result in a vast improvement. Using additional metrics such as precision, recall and f1 score would also provide a deeper evaluation of the performance of the models. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. References"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GUPTA, A., 2020. Human Faces, A web scraped dataset of human faces suggested for image processing models. [online]. US: Kaggle. Available from: https://www.kaggle.com/ashwingupta3012/human-faces URL [16th April 2021].\n",
    "\n",
    "LARXEL., 2020. Face Mask Detection. [online]. US: Kaggle. Available from: :https://www.kaggle.com/andrewmvd/face-mask-detection URL [16th April 2021]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
